00001 /*
00002  * Software License Agreement (BSD License)
00003  *
00004  *  Point Cloud Library (PCL) - www.pointclouds.org
00005  *  Copyright (c) 2010-2012, Willow Garage, Inc.
00006  *
00007  *  All rights reserved.
00008  *
00009  *  Redistribution and use in source and binary forms, with or without
00010  *  modification, are permitted provided that the following conditions
00011  *  are met:
00012  *
00013  *   * Redistributions of source code must retain the above copyright
00014  *     notice, this list of conditions and the following disclaimer.
00015  *   * Redistributions in binary form must reproduce the above
00016  *     copyright notice, this list of conditions and the following
00017  *     disclaimer in the documentation and/or other materials provided
00018  *     with the distribution.
00019  *   * Neither the name of Willow Garage, Inc. nor the names of its
00020  *     contributors may be used to endorse or promote products derived
00021  *     from this software without specific prior written permission.
00022  *
00023  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
00024  *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
00025  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
00026  *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
00027  *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
00028  *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
00029  *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
00030  *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
00031  *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
00032  *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
00033  *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
00034  *  POSSIBILITY OF SUCH DAMAGE.
00035  *
00036  * $Id: octree_search.h 5596 2012-04-17 15:09:31Z jkammerl $
00037  */
00038 
00039 #ifndef PCL_OCTREE_SEARCH_H_
00040 #define PCL_OCTREE_SEARCH_H_
00041 
00042 #include <pcl/point_cloud.h>
00043 #include <pcl/point_types.h>
00044 
00045 #include "octree_pointcloud.h"
00046 
00047 #include "octree_base.h"
00048 #include "octree2buf_base.h"
00049 #include "octree_nodes.h"
00050 
00051 namespace pcl
00052 {
00053   namespace octree
00054   {
00061     template<typename PointT, typename LeafT = OctreeLeafDataTVector<int> , typename OctreeT = OctreeBase<int, LeafT> >
00062     class OctreePointCloudSearch : public OctreePointCloud<PointT, LeafT, OctreeT>
00063     {
00064       public:
00065         // public typedefs
00066         typedef boost::shared_ptr<std::vector<int> > IndicesPtr;
00067         typedef boost::shared_ptr<const std::vector<int> > IndicesConstPtr;
00068 
00069         typedef pcl::PointCloud<PointT> PointCloud;
00070         typedef boost::shared_ptr<PointCloud> PointCloudPtr;
00071         typedef boost::shared_ptr<const PointCloud> PointCloudConstPtr;
00072 
00073         // public typedefs for single/double buffering
00074         typedef OctreePointCloudSearch<PointT, LeafT, OctreeBase<int, LeafT> > SingleBuffer;
00075         typedef OctreePointCloudSearch<PointT, LeafT, Octree2BufBase<int, LeafT> > DoubleBuffer;
00076         typedef OctreePointCloudSearch<PointT, LeafT, OctreeLowMemBase<int, LeafT> > LowMem;
00077 
00078         // Boost shared pointers
00079         typedef boost::shared_ptr<OctreePointCloudSearch<PointT, LeafT, OctreeT> > Ptr;
00080         typedef boost::shared_ptr<const OctreePointCloudSearch<PointT, LeafT, OctreeT> > ConstPtr;
00081 
00082         // Eigen aligned allocator
00083         typedef std::vector<PointT, Eigen::aligned_allocator<PointT> > AlignedPointTVector;
00084 
00085         typedef typename OctreeT::OctreeBranch OctreeBranch;
00086         typedef typename OctreeT::OctreeLeaf OctreeLeaf;
00087 
00091         OctreePointCloudSearch (const double resolution) :
00092           OctreePointCloud<PointT, LeafT, OctreeT> (resolution)
00093         {
00094         }
00095 
00097         virtual
00098         ~OctreePointCloudSearch ()
00099         {
00100         }
00101 
00107         bool
00108         voxelSearch (const PointT& point, std::vector<int>& pointIdx_data);
00109 
00115         bool
00116         voxelSearch (const int index, std::vector<int>& pointIdx_data);
00117 
00127         inline int
00128         nearestKSearch (const PointCloud &cloud, int index, int k, std::vector<int> &k_indices,
00129                         std::vector<float> &k_sqr_distances)
00130         {
00131           return (nearestKSearch (cloud[index], k, k_indices, k_sqr_distances));
00132         }
00133 
00141         int
00142         nearestKSearch (const PointT &p_q, int k, std::vector<int> &k_indices,
00143                         std::vector<float> &k_sqr_distances);
00144 
00154         int
00155         nearestKSearch (int index, int k, std::vector<int> &k_indices,
00156                         std::vector<float> &k_sqr_distances);
00157 
00165         inline void
00166         approxNearestSearch (const PointCloud &cloud, int query_index, int &result_index,
00167                              float &sqr_distance)
00168         {
00169           return (approxNearestSearch (cloud.points[query_index], result_index, sqr_distance));
00170         }
00171 
00177         void
00178         approxNearestSearch (const PointT &p_q, int &result_index, float &sqr_distance);
00179 
00187         void
00188         approxNearestSearch (int query_index, int &result_index, float &sqr_distance);
00189 
00199         int
00200         radiusSearch (const PointCloud &cloud, int index, double radius,
00201                       std::vector<int> &k_indices, std::vector<float> &k_sqr_distances,
00202                       unsigned int max_nn = 0)
00203         {
00204           return (radiusSearch (cloud.points[index], radius, k_indices, k_sqr_distances, max_nn));
00205         }
00206 
00215         int
00216         radiusSearch (const PointT &p_q, const double radius, std::vector<int> &k_indices,
00217                       std::vector<float> &k_sqr_distances, unsigned int max_nn = 0) const;
00218 
00228         int
00229         radiusSearch (int index, const double radius, std::vector<int> &k_indices,
00230                       std::vector<float> &k_sqr_distances, unsigned int max_nn = 0) const;
00231 
00238         int
00239         getIntersectedVoxelCenters (Eigen::Vector3f origin, Eigen::Vector3f direction,
00240                                     AlignedPointTVector &voxelCenterList) const;
00241 
00248         int
00249         getIntersectedVoxelIndices (Eigen::Vector3f origin, Eigen::Vector3f direction,
00250                                     std::vector<int> &k_indices) const;
00251 
00252 
00259         int
00260         boxSearch (const Eigen::Vector3f &min_pt, const Eigen::Vector3f &max_pt, std::vector<int> &k_indices) const;
00261 
00262       protected:
00264         // Octree-based search routines & helpers
00266 
00270         class prioBranchQueueEntry
00271         {
00272           public:
00274             prioBranchQueueEntry () : node (), pointDistance (0), key ()
00275             {
00276             }
00277 
00283             prioBranchQueueEntry (OctreeNode* _node, OctreeKey& _key, float _point_distance) :
00284               node (_node), pointDistance (_point_distance), key (_key)
00285             {
00286             }
00287 
00291             bool
00292             operator < (const prioBranchQueueEntry rhs) const
00293             {
00294               return (this->pointDistance > rhs.pointDistance);
00295             }
00296 
00298             const OctreeNode* node;
00299 
00301             float pointDistance;
00302 
00304             OctreeKey key;
00305         };
00306 
00308 
00312         class prioPointQueueEntry
00313         {
00314           public:
00315 
00317             prioPointQueueEntry () :
00318               pointIdx_ (0), pointDistance_ (0)
00319             {
00320             }
00321 
00326             prioPointQueueEntry (unsigned int& pointIdx, float pointDistance) :
00327               pointIdx_ (pointIdx), pointDistance_ (pointDistance)
00328             {
00329             }
00330 
00334             bool
00335             operator< (const prioPointQueueEntry& rhs) const
00336             {
00337               return (this->pointDistance_ < rhs.pointDistance_);
00338             }
00339 
00341             int pointIdx_;
00342 
00344             float pointDistance_;
00345         };
00346 
00352         float
00353         pointSquaredDist (const PointT& pointA, const PointT& pointB) const;
00354 
00356         // Recursive search routine methods
00358 
00369         void
00370         getNeighborsWithinRadiusRecursive (const PointT& point, const double radiusSquared,
00371                                            const OctreeBranch* node, const OctreeKey& key,
00372                                            unsigned int treeDepth, std::vector<int>& k_indices,
00373                                            std::vector<float>& k_sqr_distances, unsigned int max_nn) const;
00374 
00385         double
00386         getKNearestNeighborRecursive (const PointT& point, unsigned int K, const OctreeBranch* node,
00387                                       const OctreeKey& key, unsigned int treeDepth,
00388                                       const double squaredSearchRadius,
00389                                       std::vector<prioPointQueueEntry>& pointCandidates) const;
00390 
00399         void
00400         approxNearestSearchRecursive (const PointT& point, const OctreeBranch* node, const OctreeKey& key,
00401                                       unsigned int treeDepth, int& result_index, float& sqr_distance);
00402 
00418         int
00419         getIntersectedVoxelCentersRecursive (double minX, double minY, double minZ, double maxX, double maxY,
00420                                              double maxZ, unsigned char a, const OctreeNode* node,
00421                                              const OctreeKey& key, AlignedPointTVector &voxelCenterList) const;
00422 
00423 
00432         void
00433         boxSearchRecursive (const Eigen::Vector3f &min_pt, const Eigen::Vector3f &max_pt, const OctreeBranch* node,
00434                             const OctreeKey& key, unsigned int treeDepth, std::vector<int>& k_indices) const;
00435 
00451         int
00452         getIntersectedVoxelIndicesRecursive (double minX, double minY, double minZ,
00453                                              double maxX, double maxY, double maxZ,
00454                                              unsigned char a, const OctreeNode* node, const OctreeKey& key,
00455                                              std::vector<int> &k_indices) const;
00456 
00468         inline void
00469         initIntersectedVoxel (Eigen::Vector3f &origin, Eigen::Vector3f &direction,
00470                               double &minX, double &minY, double &minZ,
00471                               double &maxX, double &maxY, double &maxZ,
00472                               unsigned char &a) const
00473         {
00474           // Account for division by zero when direction vector is 0.0
00475           const float epsilon = 1e-10f;
00476           if (direction.x () == 0.0)
00477             direction.x () = epsilon;
00478           if (direction.y () == 0.0)
00479             direction.y () = epsilon;
00480           if (direction.z () == 0.0)
00481             direction.z () = epsilon;
00482 
00483           // Voxel childIdx remapping
00484           a = 0;
00485 
00486           // Handle negative axis direction vector
00487           if (direction.x () < 0.0)
00488           {
00489             origin.x () = static_cast<float> (this->minX_) + static_cast<float> (this->maxX_) - origin.x ();
00490             direction.x () = -direction.x ();
00491             a |= 4;
00492           }
00493           if (direction.y () < 0.0)
00494           {
00495             origin.y () = static_cast<float> (this->minY_) + static_cast<float> (this->maxY_) - origin.y ();
00496             direction.y () = -direction.y ();
00497             a |= 2;
00498           }
00499           if (direction.z () < 0.0)
00500           {
00501             origin.z () = static_cast<float> (this->minZ_) + static_cast<float> (this->maxZ_) - origin.z ();
00502             direction.z () = -direction.z ();
00503             a |= 1;
00504           }
00505           minX = (this->minX_ - origin.x ()) / direction.x ();
00506           maxX = (this->maxX_ - origin.x ()) / direction.x ();
00507           minY = (this->minY_ - origin.y ()) / direction.y ();
00508           maxY = (this->maxY_ - origin.y ()) / direction.y ();
00509           minZ = (this->minZ_ - origin.z ()) / direction.z ();
00510           maxZ = (this->maxZ_ - origin.z ()) / direction.z ();
00511         }
00512 
00522         inline int
00523         getFirstIntersectedNode (double minX, double minY, double minZ, double midX, double midY, double midZ) const
00524         {
00525           int currNode = 0;
00526 
00527           if (minX > minY)
00528           {
00529             if (minX > minZ)
00530             {
00531               // max(minX, minY, minZ) is minX. Entry plane is YZ.
00532               if (midY < minX)
00533                 currNode |= 2;
00534               if (midZ < minX)
00535                 currNode |= 1;
00536             }
00537             else
00538             {
00539               // max(minX, minY, minZ) is minZ. Entry plane is XY.
00540               if (midX < minZ)
00541                 currNode |= 4;
00542               if (midY < minZ)
00543                 currNode |= 2;
00544             }
00545           }
00546           else
00547           {
00548             if (minY > minZ)
00549             {
00550               // max(minX, minY, minZ) is minY. Entry plane is XZ.
00551               if (midX < minY)
00552                 currNode |= 4;
00553               if (midZ < minY)
00554                 currNode |= 1;
00555             }
00556             else
00557             {
00558               // max(minX, minY, minZ) is minZ. Entry plane is XY.
00559               if (midX < minZ)
00560                 currNode |= 4;
00561               if (midY < minZ)
00562                 currNode |= 2;
00563             }
00564           }
00565 
00566           return currNode;
00567         }
00568 
00581         inline int
00582         getNextIntersectedNode (double x, double y, double z, int a, int b, int c) const
00583         {
00584           if (x < y)
00585           {
00586             if (x < z)
00587               return a;
00588             else
00589               return c;
00590           }
00591           else
00592           {
00593             if (y < z)
00594               return b;
00595             else
00596               return c;
00597           }
00598 
00599           return 0;
00600         }
00601 
00602       };
00603   }
00604 }
00605 
00606 #define PCL_INSTANTIATE_OctreePointCloudSearch(T) template class PCL_EXPORTS pcl::octree::OctreePointCloudSearch<T>;
00607 
00608 #endif    // PCL_OCTREE_SEARCH_H_