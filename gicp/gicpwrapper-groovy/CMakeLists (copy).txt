set(ROS_COMPILE_FLAGS ${ROS_COMPILE_FLAGS} -fopenmp)

cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE RelWithDebInfo)
rosbuild_init()

set(CMAKE_CXX_FLAGS "-O3")
IF ("${ROS_PARALLEL_JOBS}" EQUAL "")
  set(ROS_PARALLEL_JOBS 1)
endif ("${ROS_PARALLEL_JOBS}" EQUAL "")

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

##############################################################################
# Required 3rd party
##############################################################################

#############################
# Octomap ###################
#############################
#find_package(octomap REQUIRED)
#include_directories(${OCTOMAP_INCLUDE_DIRS})
#link_directories(${OCTOMAP_LIBRARY_DIRS})
#link_libraries(${OCTOMAP_LIBRARIES})

#############################
# Qt ########################
#############################
# http://qtnode.net/wiki/Qt4_with_cmake
find_package(Qt4 REQUIRED)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTOPENGL TRUE)
SET(QT_USE_QT3SUPPORT TRUE)
ADD_DEFINITIONS(-DQT_NO_KEYWORDS)
include(${QT_USE_FILE})
include_directories(${Qt4_INCLUDE_DIRS})

############################
#pcl
############################
set(PCL_INCLUDE /usr/local/include/pcl-1.6)
set(PCL_LIB_DIR /usr/local/lib)
set(PCL_LIBS pcl_common pcl_features pcl_filters pcl_geometry pcl_io pcl_kdtree pcl_keypoints pcl_octree pcl_registration pcl_sample_consensus pcl_search pcl_segmentation pcl_surface pcl_tracking pcl_visualization)
include_directories(${PCL_INCLUDE})

set(EXTERN_DIR ${CMAKE_SOURCE_DIR}/external)
###########################
# Octomap
###########################
set(OCTOMAP_INCLUDE ${EXTERN_DIR}/octomap/octovis/include 
    ${EXTERN_DIR}/octomap/octomap/include
    ${EXTERN_DIR}/octomap/dynamicEDT3D/include
    ${EXTERN_DIR}/octomap/build/octovis)
set(OCTOMAP_LIB_DIR ${EXTERN_DIR}/octomap/lib )
set(OCTOMAP_LIBS octomath octomap octovis dynamicedt3d )
include_directories(${OCTOMAP_INCLUDE})
link_directories(${OCTOMAP_LIB_DIR})

###########################
# Octomap Viewer
###########################
# set(VIEWER_DIR ${EXTERN_DIR}/octomap/octovis/include/octovis)
# set(VIEWER_SRC_DIR ${EXTERN_DIR}/octomap/octovis/src)
set(VIEWER_SRC_DIR ${CMAKE_SOURCE_DIR}/src/viewer)
set(VIEWER_DIR ${VIEWER_SRC_DIR})
set(viewer_SRCS
    ${VIEWER_SRC_DIR}/ViewerGui.cpp
    ${VIEWER_SRC_DIR}/ViewerWidget.cpp
    ${VIEWER_SRC_DIR}/ViewerSettings.cpp
    ${VIEWER_SRC_DIR}/ViewerSettingsPanel.cpp
    ${VIEWER_SRC_DIR}/ViewerSettingsPanelCamera.cpp
    ${VIEWER_SRC_DIR}/CameraFollowMode.cpp
    )
set(viewer_RES ${EXTERN_DIR}/octomap/octovis/src/icons.qrc)
set(viewer_MOC_HDRS 
    ${VIEWER_DIR}/ViewerGui.h
    ${VIEWER_DIR}/ViewWidget.h
    ${VIEWER_DIR}/ViewerSettings.h
    ${VIEWER_DIR}/ViewerSettingsPanel.h
    ${VIEWER_DIR}/ViewerSettingsPanelCamera.h
    ${VIEWER_DIR}/CameraFollowMode.h
    )
include_directories(${VIEWER_SRC_DIR})
QT4_WRAP_CPP(viewer_MOC_SRCS ${viewer_MOC_HDRS})
set(viewer_UIS
    ${VIEWER_DIR}/ViewerGui.ui
    ${VIEWER_DIR}/ViewerSettings.ui
    ${VIEWER_DIR}/ViewerSettingsPanel.ui
    ${VIEWER_DIR}/ViewerSettingsPanelCamera.ui
    )
QT4_WRAP_UI(viewer_UIS_H ${viewer_UIS})
set(VIEWER_FILES ${viewer_SRCS} ${viewer_MOC_SRCS} ${viewer_UIS_H} ${viewer_RES})
include_directories(${CMAKE_BINARY_DIR})

# /usr/include/QGLViewer
# This is necessary as all ui files etc will get dumped in the bottom of then binary directory. 
include_directories(${CMAKE_CURRENT_BINARY_DIR} ${QT_QTOPENGL_INCLUDE_DIR} 
    /home/davidz/work/octomap/octovis/src/extern/QGLViewer
    external/gicp/ann_1.1.1/include/ANN external/gicp/ann_1.1.1/include)
 	
LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
SET(${CMAKE_LIBRARY_PATH} ${LIBRARY_OUTPUT_PATH})
#SET(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE TRUE)

# find_package(libg2o REQUIRED)
#set(G2O_LIB_DIR
#   /home/davidz/work/ros/fuetre/stacks/ccny_rgbd_tools/ccny_g2o/lib)
#set(G2O_LIB_DIR    /home/davidz/work/ros/fuetre/stacks/g2o-master/lib)
# link_directories(${G2O_LIB_DIR})

set(USE_GICP 1)
#############################
# GICP ######################
#############################
IF (${USE_GICP})
	SET(gicp_build_path ${CMAKE_SOURCE_DIR}/external/gicp/ann_1.1.1)
  FILE(MAKE_DIRECTORY ${gicp_build_path}/lib/)
  MESSAGE("\n------------------------------------------------------------------\n")
	MESSAGE("Compiling GICP...")
	EXECUTE_PROCESS(
	    COMMAND make ${ROS_PARALLEL_JOBS} linux-g++
	    WORKING_DIRECTORY ${gicp_build_path}
	    RESULT_VARIABLE gicp_return
    )
    MESSAGE("\n------------------------------------------------------------------\n")
	
	#on error
	IF (NOT ${gicp_return} EQUAL 0)
		MESSAGE(FATAL_ERROR "GICP cannot be compiled. Returned: ${gicp_return}")
	ENDIF (NOT ${gicp_return} EQUAL 0)
	
	FILE(COPY ${gicp_build_path}/lib/libANN.a DESTINATION ${CMAKE_SOURCE_DIR}/lib/)
ENDIF (${USE_GICP})

#############################
# OpenCV ####################
#############################
#find_package(OpenCV)
# include_directories(${OpenCV_INCLUDE_DIRS} external/ /usr/include/suitesparse/)
include_directories(/usr/include/suitesparse/)

#############################
# Eigen ####################
#############################
find_package(Eigen)
IF(Eigen_FOUND)
  include_directories(${EIGEN_INCLUDE_DIRS})
  add_definitions(${EIGEN_DEFINITIONS})
ELSE(Eigen_FOUND)
  MESSAGE("Eigen package was not found. This is OK FOR ROS ELECTRIC, bad for fuerte\n")
ENDIF(Eigen_FOUND)

##############################################################################
# Some QT Magic (MOC Creation)
##############################################################################

#QT4_ADD_RESOURCES(QT_RESOURCES_CPP ${QT_RESOURCES})
#QT4_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})
#QT4_WRAP_CPP(QT_MOC_HPP ${QT_MOC})

SET(LIBS_LINK GL GLU ${QT_LIBRARIES} ${QT_QTOPENGL_LIBRARY})
SET(LIBS_LINK ${LIBS_LINK} gicp ANN gsl gslcblas)
set(LIBS_LINK ${PCL_LIBS} ${OCTOMAP_LIBS} ${LIBS_LINK})
set(OURQT_MOC src/OctoVizWrapper.h)
QT4_WRAP_CPP(OURQT_MOC_HPP ${OURQT_MOC})
# file(GLOB OURSRCS ./src/*.cpp)
set(OURSRCS src/main.cpp src/OctoVizWrapper.cpp src/globaldef.cpp)
rosbuild_add_executable(mygicp ${OURSRCS} ${VIEWER_FILES} ${OURQT_MOC_HPP})
target_link_libraries(mygicp ${LIBS_LINK})

if(${USE_GICP})
    set(ROS_COMPILE_FLAGS ${ROS_COMPILE_FLAGS} -fpermissive)
    rosbuild_add_library(gicp external/gicp/bfgs_funcs.cpp external/gicp/gicp.cpp external/gicp/optimize.cpp external/gicp/scan.cpp external/gicp/transform.cpp)
endif(${USE_GICP})

rosbuild_add_executable(align src/template_alignment.cpp)
target_link_libraries(align ${PCL_LIBS})
################################################################
# below is our project
#################################################################
#set(OURQT_MOC src/OpenniWrapper.h src/NodeWrapper.h)
#QT4_WRAP_CPP(OURQT_MOC_HPP ${OURQT_MOC})
