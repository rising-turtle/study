// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HomeMessages/messages_@home_zjupanda_laser.proto

#ifndef PROTOBUF_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto__INCLUDED
#define PROTOBUF_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
void protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
void protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();

class Home_Beam;
class Home_Range;
class Home_Laser;

// ===================================================================

class Home_Beam : public ::google::protobuf::Message {
 public:
  Home_Beam();
  virtual ~Home_Beam();
  
  Home_Beam(const Home_Beam& from);
  
  inline Home_Beam& operator=(const Home_Beam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Home_Beam& default_instance();
  
  void Swap(Home_Beam* other);
  
  // implements Message ----------------------------------------------
  
  Home_Beam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Home_Beam& from);
  void MergeFrom(const Home_Beam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double angle = 1;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 1;
  inline double angle() const;
  inline void set_angle(double value);
  
  // required double dist = 2;
  inline bool has_dist() const;
  inline void clear_dist();
  static const int kDistFieldNumber = 2;
  inline double dist() const;
  inline void set_dist(double value);
  
  // @@protoc_insertion_point(class_scope:Home_Beam)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double angle_;
  double dist_;
  friend void  protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Home_Beam* default_instance_;
};
// -------------------------------------------------------------------

class Home_Range : public ::google::protobuf::Message {
 public:
  Home_Range();
  virtual ~Home_Range();
  
  Home_Range(const Home_Range& from);
  
  inline Home_Range& operator=(const Home_Range& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Home_Range& default_instance();
  
  void Swap(Home_Range* other);
  
  // implements Message ----------------------------------------------
  
  Home_Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Home_Range& from);
  void MergeFrom(const Home_Range& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cycle = 1;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 1;
  inline ::google::protobuf::uint32 cycle() const;
  inline void set_cycle(::google::protobuf::uint32 value);
  
  // required uint32 laser_data_num = 2;
  inline bool has_laser_data_num() const;
  inline void clear_laser_data_num();
  static const int kLaserDataNumFieldNumber = 2;
  inline ::google::protobuf::uint32 laser_data_num() const;
  inline void set_laser_data_num(::google::protobuf::uint32 value);
  
  // required double c_angle_min = 3;
  inline bool has_c_angle_min() const;
  inline void clear_c_angle_min();
  static const int kCAngleMinFieldNumber = 3;
  inline double c_angle_min() const;
  inline void set_c_angle_min(double value);
  
  // required double c_angle_max = 4;
  inline bool has_c_angle_max() const;
  inline void clear_c_angle_max();
  static const int kCAngleMaxFieldNumber = 4;
  inline double c_angle_max() const;
  inline void set_c_angle_max(double value);
  
  // required double c_angle_step = 5;
  inline bool has_c_angle_step() const;
  inline void clear_c_angle_step();
  static const int kCAngleStepFieldNumber = 5;
  inline double c_angle_step() const;
  inline void set_c_angle_step(double value);
  
  // required double c_device_pos_offset_x = 6;
  inline bool has_c_device_pos_offset_x() const;
  inline void clear_c_device_pos_offset_x();
  static const int kCDevicePosOffsetXFieldNumber = 6;
  inline double c_device_pos_offset_x() const;
  inline void set_c_device_pos_offset_x(double value);
  
  // required double c_device_pos_offset_y = 7;
  inline bool has_c_device_pos_offset_y() const;
  inline void clear_c_device_pos_offset_y();
  static const int kCDevicePosOffsetYFieldNumber = 7;
  inline double c_device_pos_offset_y() const;
  inline void set_c_device_pos_offset_y(double value);
  
  // required double c_device_pos_offset_a = 8;
  inline bool has_c_device_pos_offset_a() const;
  inline void clear_c_device_pos_offset_a();
  static const int kCDevicePosOffsetAFieldNumber = 8;
  inline double c_device_pos_offset_a() const;
  inline void set_c_device_pos_offset_a(double value);
  
  // @@protoc_insertion_point(class_scope:Home_Range)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 cycle_;
  ::google::protobuf::uint32 laser_data_num_;
  double c_angle_min_;
  double c_angle_max_;
  double c_angle_step_;
  double c_device_pos_offset_x_;
  double c_device_pos_offset_y_;
  double c_device_pos_offset_a_;
  friend void  protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Home_Range* default_instance_;
};
// -------------------------------------------------------------------

class Home_Laser : public ::google::protobuf::Message {
 public:
  Home_Laser();
  virtual ~Home_Laser();
  
  Home_Laser(const Home_Laser& from);
  
  inline Home_Laser& operator=(const Home_Laser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Home_Laser& default_instance();
  
  void Swap(Home_Laser* other);
  
  // implements Message ----------------------------------------------
  
  Home_Laser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Home_Laser& from);
  void MergeFrom(const Home_Laser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Home_Range laser_range = 1;
  inline bool has_laser_range() const;
  inline void clear_laser_range();
  static const int kLaserRangeFieldNumber = 1;
  inline const ::Home_Range& laser_range() const;
  inline ::Home_Range* mutable_laser_range();
  
  // repeated .Home_Beam laser_data = 2;
  inline int laser_data_size() const;
  inline void clear_laser_data();
  static const int kLaserDataFieldNumber = 2;
  inline const ::Home_Beam& laser_data(int index) const;
  inline ::Home_Beam* mutable_laser_data(int index);
  inline ::Home_Beam* add_laser_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Home_Beam >&
      laser_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Home_Beam >*
      mutable_laser_data();
  
  // @@protoc_insertion_point(class_scope:Home_Laser)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Home_Range* laser_range_;
  ::google::protobuf::RepeatedPtrField< ::Home_Beam > laser_data_;
  friend void  protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  friend void protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Home_Laser* default_instance_;
};
// ===================================================================


// ===================================================================

// Home_Beam

// required double angle = 1;
inline bool Home_Beam::has_angle() const {
  return _has_bit(0);
}
inline void Home_Beam::clear_angle() {
  angle_ = 0;
  _clear_bit(0);
}
inline double Home_Beam::angle() const {
  return angle_;
}
inline void Home_Beam::set_angle(double value) {
  _set_bit(0);
  angle_ = value;
}

// required double dist = 2;
inline bool Home_Beam::has_dist() const {
  return _has_bit(1);
}
inline void Home_Beam::clear_dist() {
  dist_ = 0;
  _clear_bit(1);
}
inline double Home_Beam::dist() const {
  return dist_;
}
inline void Home_Beam::set_dist(double value) {
  _set_bit(1);
  dist_ = value;
}

// -------------------------------------------------------------------

// Home_Range

// optional uint32 cycle = 1;
inline bool Home_Range::has_cycle() const {
  return _has_bit(0);
}
inline void Home_Range::clear_cycle() {
  cycle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 Home_Range::cycle() const {
  return cycle_;
}
inline void Home_Range::set_cycle(::google::protobuf::uint32 value) {
  _set_bit(0);
  cycle_ = value;
}

// required uint32 laser_data_num = 2;
inline bool Home_Range::has_laser_data_num() const {
  return _has_bit(1);
}
inline void Home_Range::clear_laser_data_num() {
  laser_data_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Home_Range::laser_data_num() const {
  return laser_data_num_;
}
inline void Home_Range::set_laser_data_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  laser_data_num_ = value;
}

// required double c_angle_min = 3;
inline bool Home_Range::has_c_angle_min() const {
  return _has_bit(2);
}
inline void Home_Range::clear_c_angle_min() {
  c_angle_min_ = 0;
  _clear_bit(2);
}
inline double Home_Range::c_angle_min() const {
  return c_angle_min_;
}
inline void Home_Range::set_c_angle_min(double value) {
  _set_bit(2);
  c_angle_min_ = value;
}

// required double c_angle_max = 4;
inline bool Home_Range::has_c_angle_max() const {
  return _has_bit(3);
}
inline void Home_Range::clear_c_angle_max() {
  c_angle_max_ = 0;
  _clear_bit(3);
}
inline double Home_Range::c_angle_max() const {
  return c_angle_max_;
}
inline void Home_Range::set_c_angle_max(double value) {
  _set_bit(3);
  c_angle_max_ = value;
}

// required double c_angle_step = 5;
inline bool Home_Range::has_c_angle_step() const {
  return _has_bit(4);
}
inline void Home_Range::clear_c_angle_step() {
  c_angle_step_ = 0;
  _clear_bit(4);
}
inline double Home_Range::c_angle_step() const {
  return c_angle_step_;
}
inline void Home_Range::set_c_angle_step(double value) {
  _set_bit(4);
  c_angle_step_ = value;
}

// required double c_device_pos_offset_x = 6;
inline bool Home_Range::has_c_device_pos_offset_x() const {
  return _has_bit(5);
}
inline void Home_Range::clear_c_device_pos_offset_x() {
  c_device_pos_offset_x_ = 0;
  _clear_bit(5);
}
inline double Home_Range::c_device_pos_offset_x() const {
  return c_device_pos_offset_x_;
}
inline void Home_Range::set_c_device_pos_offset_x(double value) {
  _set_bit(5);
  c_device_pos_offset_x_ = value;
}

// required double c_device_pos_offset_y = 7;
inline bool Home_Range::has_c_device_pos_offset_y() const {
  return _has_bit(6);
}
inline void Home_Range::clear_c_device_pos_offset_y() {
  c_device_pos_offset_y_ = 0;
  _clear_bit(6);
}
inline double Home_Range::c_device_pos_offset_y() const {
  return c_device_pos_offset_y_;
}
inline void Home_Range::set_c_device_pos_offset_y(double value) {
  _set_bit(6);
  c_device_pos_offset_y_ = value;
}

// required double c_device_pos_offset_a = 8;
inline bool Home_Range::has_c_device_pos_offset_a() const {
  return _has_bit(7);
}
inline void Home_Range::clear_c_device_pos_offset_a() {
  c_device_pos_offset_a_ = 0;
  _clear_bit(7);
}
inline double Home_Range::c_device_pos_offset_a() const {
  return c_device_pos_offset_a_;
}
inline void Home_Range::set_c_device_pos_offset_a(double value) {
  _set_bit(7);
  c_device_pos_offset_a_ = value;
}

// -------------------------------------------------------------------

// Home_Laser

// required .Home_Range laser_range = 1;
inline bool Home_Laser::has_laser_range() const {
  return _has_bit(0);
}
inline void Home_Laser::clear_laser_range() {
  if (laser_range_ != NULL) laser_range_->::Home_Range::Clear();
  _clear_bit(0);
}
inline const ::Home_Range& Home_Laser::laser_range() const {
  return laser_range_ != NULL ? *laser_range_ : *default_instance_->laser_range_;
}
inline ::Home_Range* Home_Laser::mutable_laser_range() {
  _set_bit(0);
  if (laser_range_ == NULL) laser_range_ = new ::Home_Range;
  return laser_range_;
}

// repeated .Home_Beam laser_data = 2;
inline int Home_Laser::laser_data_size() const {
  return laser_data_.size();
}
inline void Home_Laser::clear_laser_data() {
  laser_data_.Clear();
}
inline const ::Home_Beam& Home_Laser::laser_data(int index) const {
  return laser_data_.Get(index);
}
inline ::Home_Beam* Home_Laser::mutable_laser_data(int index) {
  return laser_data_.Mutable(index);
}
inline ::Home_Beam* Home_Laser::add_laser_data() {
  return laser_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Home_Beam >&
Home_Laser::laser_data() const {
  return laser_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Home_Beam >*
Home_Laser::mutable_laser_data() {
  return &laser_data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto__INCLUDED
