// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HomeMessages/messages_@home_zjupanda_laser.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Home_Beam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Home_Beam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Home_Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Home_Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Home_Laser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Home_Laser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto() {
  protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HomeMessages/messages_@home_zjupanda_laser.proto");
  GOOGLE_CHECK(file != NULL);
  Home_Beam_descriptor_ = file->message_type(0);
  static const int Home_Beam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Beam, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Beam, dist_),
  };
  Home_Beam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Home_Beam_descriptor_,
      Home_Beam::default_instance_,
      Home_Beam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Beam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Beam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Home_Beam));
  Home_Range_descriptor_ = file->message_type(1);
  static const int Home_Range_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, laser_data_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_angle_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_device_pos_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_device_pos_offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, c_device_pos_offset_a_),
  };
  Home_Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Home_Range_descriptor_,
      Home_Range::default_instance_,
      Home_Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Home_Range));
  Home_Laser_descriptor_ = file->message_type(2);
  static const int Home_Laser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Laser, laser_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Laser, laser_data_),
  };
  Home_Laser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Home_Laser_descriptor_,
      Home_Laser::default_instance_,
      Home_Laser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Laser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Home_Laser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Home_Laser));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Home_Beam_descriptor_, &Home_Beam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Home_Range_descriptor_, &Home_Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Home_Laser_descriptor_, &Home_Laser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto() {
  delete Home_Beam::default_instance_;
  delete Home_Beam_reflection_;
  delete Home_Range::default_instance_;
  delete Home_Range_reflection_;
  delete Home_Laser::default_instance_;
  delete Home_Laser_reflection_;
}

void protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n0HomeMessages/messages_@home_zjupanda_l"
    "aser.proto\"(\n\tHome_Beam\022\r\n\005angle\030\001 \002(\001\022\014"
    "\n\004dist\030\002 \002(\001\"\320\001\n\nHome_Range\022\r\n\005cycle\030\001 \001"
    "(\r\022\026\n\016laser_data_num\030\002 \002(\r\022\023\n\013c_angle_mi"
    "n\030\003 \002(\001\022\023\n\013c_angle_max\030\004 \002(\001\022\024\n\014c_angle_"
    "step\030\005 \002(\001\022\035\n\025c_device_pos_offset_x\030\006 \002("
    "\001\022\035\n\025c_device_pos_offset_y\030\007 \002(\001\022\035\n\025c_de"
    "vice_pos_offset_a\030\010 \002(\001\"N\n\nHome_Laser\022 \n"
    "\013laser_range\030\001 \002(\0132\013.Home_Range\022\036\n\nlaser"
    "_data\030\002 \003(\0132\n.Home_Beam", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HomeMessages/messages_@home_zjupanda_laser.proto", &protobuf_RegisterTypes);
  Home_Beam::default_instance_ = new Home_Beam();
  Home_Range::default_instance_ = new Home_Range();
  Home_Laser::default_instance_ = new Home_Laser();
  Home_Beam::default_instance_->InitAsDefaultInstance();
  Home_Range::default_instance_->InitAsDefaultInstance();
  Home_Laser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto {
  StaticDescriptorInitializer_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto() {
    protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();
  }
} static_descriptor_initializer_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Home_Beam::kAngleFieldNumber;
const int Home_Beam::kDistFieldNumber;
#endif  // !_MSC_VER

Home_Beam::Home_Beam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Home_Beam::InitAsDefaultInstance() {
}

Home_Beam::Home_Beam(const Home_Beam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Home_Beam::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Home_Beam::~Home_Beam() {
  SharedDtor();
}

void Home_Beam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Home_Beam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Home_Beam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Home_Beam_descriptor_;
}

const Home_Beam& Home_Beam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();  return *default_instance_;
}

Home_Beam* Home_Beam::default_instance_ = NULL;

Home_Beam* Home_Beam::New() const {
  return new Home_Beam;
}

void Home_Beam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
    dist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Home_Beam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dist;
        break;
      }
      
      // required double dist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Home_Beam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double angle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }
  
  // required double dist = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Home_Beam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double angle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }
  
  // required double dist = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Home_Beam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
    // required double dist = 2;
    if (has_dist()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Home_Beam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Home_Beam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Home_Beam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Home_Beam::MergeFrom(const Home_Beam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_angle(from.angle());
    }
    if (from._has_bit(1)) {
      set_dist(from.dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Home_Beam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Home_Beam::CopyFrom(const Home_Beam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Home_Beam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Home_Beam::Swap(Home_Beam* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(dist_, other->dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Home_Beam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Home_Beam_descriptor_;
  metadata.reflection = Home_Beam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Home_Range::kCycleFieldNumber;
const int Home_Range::kLaserDataNumFieldNumber;
const int Home_Range::kCAngleMinFieldNumber;
const int Home_Range::kCAngleMaxFieldNumber;
const int Home_Range::kCAngleStepFieldNumber;
const int Home_Range::kCDevicePosOffsetXFieldNumber;
const int Home_Range::kCDevicePosOffsetYFieldNumber;
const int Home_Range::kCDevicePosOffsetAFieldNumber;
#endif  // !_MSC_VER

Home_Range::Home_Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Home_Range::InitAsDefaultInstance() {
}

Home_Range::Home_Range(const Home_Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Home_Range::SharedCtor() {
  _cached_size_ = 0;
  cycle_ = 0u;
  laser_data_num_ = 0u;
  c_angle_min_ = 0;
  c_angle_max_ = 0;
  c_angle_step_ = 0;
  c_device_pos_offset_x_ = 0;
  c_device_pos_offset_y_ = 0;
  c_device_pos_offset_a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Home_Range::~Home_Range() {
  SharedDtor();
}

void Home_Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Home_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Home_Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Home_Range_descriptor_;
}

const Home_Range& Home_Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();  return *default_instance_;
}

Home_Range* Home_Range::default_instance_ = NULL;

Home_Range* Home_Range::New() const {
  return new Home_Range;
}

void Home_Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cycle_ = 0u;
    laser_data_num_ = 0u;
    c_angle_min_ = 0;
    c_angle_max_ = 0;
    c_angle_step_ = 0;
    c_device_pos_offset_x_ = 0;
    c_device_pos_offset_y_ = 0;
    c_device_pos_offset_a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Home_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cycle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cycle_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laser_data_num;
        break;
      }
      
      // required uint32 laser_data_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laser_data_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laser_data_num_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_c_angle_min;
        break;
      }
      
      // required double c_angle_min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_angle_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_angle_min_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_c_angle_max;
        break;
      }
      
      // required double c_angle_max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_angle_max_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_c_angle_step;
        break;
      }
      
      // required double c_angle_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_angle_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_angle_step_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_c_device_pos_offset_x;
        break;
      }
      
      // required double c_device_pos_offset_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_device_pos_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_device_pos_offset_x_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_c_device_pos_offset_y;
        break;
      }
      
      // required double c_device_pos_offset_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_device_pos_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_device_pos_offset_y_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_c_device_pos_offset_a;
        break;
      }
      
      // required double c_device_pos_offset_a = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_c_device_pos_offset_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_device_pos_offset_a_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Home_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cycle = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cycle(), output);
  }
  
  // required uint32 laser_data_num = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->laser_data_num(), output);
  }
  
  // required double c_angle_min = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c_angle_min(), output);
  }
  
  // required double c_angle_max = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c_angle_max(), output);
  }
  
  // required double c_angle_step = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c_angle_step(), output);
  }
  
  // required double c_device_pos_offset_x = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c_device_pos_offset_x(), output);
  }
  
  // required double c_device_pos_offset_y = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->c_device_pos_offset_y(), output);
  }
  
  // required double c_device_pos_offset_a = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->c_device_pos_offset_a(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Home_Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cycle = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cycle(), target);
  }
  
  // required uint32 laser_data_num = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->laser_data_num(), target);
  }
  
  // required double c_angle_min = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c_angle_min(), target);
  }
  
  // required double c_angle_max = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c_angle_max(), target);
  }
  
  // required double c_angle_step = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c_angle_step(), target);
  }
  
  // required double c_device_pos_offset_x = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c_device_pos_offset_x(), target);
  }
  
  // required double c_device_pos_offset_y = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->c_device_pos_offset_y(), target);
  }
  
  // required double c_device_pos_offset_a = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->c_device_pos_offset_a(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Home_Range::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cycle = 1;
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cycle());
    }
    
    // required uint32 laser_data_num = 2;
    if (has_laser_data_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->laser_data_num());
    }
    
    // required double c_angle_min = 3;
    if (has_c_angle_min()) {
      total_size += 1 + 8;
    }
    
    // required double c_angle_max = 4;
    if (has_c_angle_max()) {
      total_size += 1 + 8;
    }
    
    // required double c_angle_step = 5;
    if (has_c_angle_step()) {
      total_size += 1 + 8;
    }
    
    // required double c_device_pos_offset_x = 6;
    if (has_c_device_pos_offset_x()) {
      total_size += 1 + 8;
    }
    
    // required double c_device_pos_offset_y = 7;
    if (has_c_device_pos_offset_y()) {
      total_size += 1 + 8;
    }
    
    // required double c_device_pos_offset_a = 8;
    if (has_c_device_pos_offset_a()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Home_Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Home_Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Home_Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Home_Range::MergeFrom(const Home_Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cycle(from.cycle());
    }
    if (from._has_bit(1)) {
      set_laser_data_num(from.laser_data_num());
    }
    if (from._has_bit(2)) {
      set_c_angle_min(from.c_angle_min());
    }
    if (from._has_bit(3)) {
      set_c_angle_max(from.c_angle_max());
    }
    if (from._has_bit(4)) {
      set_c_angle_step(from.c_angle_step());
    }
    if (from._has_bit(5)) {
      set_c_device_pos_offset_x(from.c_device_pos_offset_x());
    }
    if (from._has_bit(6)) {
      set_c_device_pos_offset_y(from.c_device_pos_offset_y());
    }
    if (from._has_bit(7)) {
      set_c_device_pos_offset_a(from.c_device_pos_offset_a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Home_Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Home_Range::CopyFrom(const Home_Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Home_Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;
  
  return true;
}

void Home_Range::Swap(Home_Range* other) {
  if (other != this) {
    std::swap(cycle_, other->cycle_);
    std::swap(laser_data_num_, other->laser_data_num_);
    std::swap(c_angle_min_, other->c_angle_min_);
    std::swap(c_angle_max_, other->c_angle_max_);
    std::swap(c_angle_step_, other->c_angle_step_);
    std::swap(c_device_pos_offset_x_, other->c_device_pos_offset_x_);
    std::swap(c_device_pos_offset_y_, other->c_device_pos_offset_y_);
    std::swap(c_device_pos_offset_a_, other->c_device_pos_offset_a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Home_Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Home_Range_descriptor_;
  metadata.reflection = Home_Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Home_Laser::kLaserRangeFieldNumber;
const int Home_Laser::kLaserDataFieldNumber;
#endif  // !_MSC_VER

Home_Laser::Home_Laser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Home_Laser::InitAsDefaultInstance() {
  laser_range_ = const_cast< ::Home_Range*>(&::Home_Range::default_instance());
}

Home_Laser::Home_Laser(const Home_Laser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Home_Laser::SharedCtor() {
  _cached_size_ = 0;
  laser_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Home_Laser::~Home_Laser() {
  SharedDtor();
}

void Home_Laser::SharedDtor() {
  if (this != default_instance_) {
    delete laser_range_;
  }
}

void Home_Laser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Home_Laser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Home_Laser_descriptor_;
}

const Home_Laser& Home_Laser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HomeMessages_2fmessages_5f_40home_5fzjupanda_5flaser_2eproto();  return *default_instance_;
}

Home_Laser* Home_Laser::default_instance_ = NULL;

Home_Laser* Home_Laser::New() const {
  return new Home_Laser;
}

void Home_Laser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (laser_range_ != NULL) laser_range_->::Home_Range::Clear();
    }
  }
  laser_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Home_Laser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Home_Range laser_range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_laser_data;
        break;
      }
      
      // repeated .Home_Beam laser_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_laser_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_laser_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Home_Laser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Home_Range laser_range = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->laser_range(), output);
  }
  
  // repeated .Home_Beam laser_data = 2;
  for (int i = 0; i < this->laser_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->laser_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Home_Laser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Home_Range laser_range = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->laser_range(), target);
  }
  
  // repeated .Home_Beam laser_data = 2;
  for (int i = 0; i < this->laser_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->laser_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Home_Laser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Home_Range laser_range = 1;
    if (has_laser_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser_range());
    }
    
  }
  // repeated .Home_Beam laser_data = 2;
  total_size += 1 * this->laser_data_size();
  for (int i = 0; i < this->laser_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->laser_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Home_Laser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Home_Laser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Home_Laser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Home_Laser::MergeFrom(const Home_Laser& from) {
  GOOGLE_CHECK_NE(&from, this);
  laser_data_.MergeFrom(from.laser_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_laser_range()->::Home_Range::MergeFrom(from.laser_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Home_Laser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Home_Laser::CopyFrom(const Home_Laser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Home_Laser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_laser_range()) {
    if (!this->laser_range().IsInitialized()) return false;
  }
  for (int i = 0; i < laser_data_size(); i++) {
    if (!this->laser_data(i).IsInitialized()) return false;
  }
  return true;
}

void Home_Laser::Swap(Home_Laser* other) {
  if (other != this) {
    std::swap(laser_range_, other->laser_range_);
    laser_data_.Swap(&other->laser_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Home_Laser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Home_Laser_descriptor_;
  metadata.reflection = Home_Laser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
